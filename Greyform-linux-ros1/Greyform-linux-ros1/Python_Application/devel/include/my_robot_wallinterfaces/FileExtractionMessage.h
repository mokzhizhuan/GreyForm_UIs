// Generated by gencpp from file my_robot_wallinterfaces/FileExtractionMessage.msg
// DO NOT EDIT!


#ifndef MY_ROBOT_WALLINTERFACES_MESSAGE_FILEEXTRACTIONMESSAGE_H
#define MY_ROBOT_WALLINTERFACES_MESSAGE_FILEEXTRACTIONMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_robot_wallinterfaces
{
template <class ContainerAllocator>
struct FileExtractionMessage_
{
  typedef FileExtractionMessage_<ContainerAllocator> Type;

  FileExtractionMessage_()
    : stl_data()
    , excelfile()  {
    }
  FileExtractionMessage_(const ContainerAllocator& _alloc)
    : stl_data(_alloc)
    , excelfile(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _stl_data_type;
  _stl_data_type stl_data;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _excelfile_type;
  _excelfile_type excelfile;





  typedef boost::shared_ptr< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> const> ConstPtr;

}; // struct FileExtractionMessage_

typedef ::my_robot_wallinterfaces::FileExtractionMessage_<std::allocator<void> > FileExtractionMessage;

typedef boost::shared_ptr< ::my_robot_wallinterfaces::FileExtractionMessage > FileExtractionMessagePtr;
typedef boost::shared_ptr< ::my_robot_wallinterfaces::FileExtractionMessage const> FileExtractionMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator1> & lhs, const ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator2> & rhs)
{
  return lhs.stl_data == rhs.stl_data &&
    lhs.excelfile == rhs.excelfile;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator1> & lhs, const ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_robot_wallinterfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81c918b74dbfb64e2d1abc77031a354e";
  }

  static const char* value(const ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81c918b74dbfb64eULL;
  static const uint64_t static_value2 = 0x2d1abc77031a354eULL;
};

template<class ContainerAllocator>
struct DataType< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_robot_wallinterfaces/FileExtractionMessage";
  }

  static const char* value(const ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] stl_data\n"
"string excelfile\n"
;
  }

  static const char* value(const ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stl_data);
      stream.next(m.excelfile);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FileExtractionMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_robot_wallinterfaces::FileExtractionMessage_<ContainerAllocator>& v)
  {
    s << indent << "stl_data[]" << std::endl;
    for (size_t i = 0; i < v.stl_data.size(); ++i)
    {
      s << indent << "  stl_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.stl_data[i]);
    }
    s << indent << "excelfile: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.excelfile);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ROBOT_WALLINTERFACES_MESSAGE_FILEEXTRACTIONMESSAGE_H
